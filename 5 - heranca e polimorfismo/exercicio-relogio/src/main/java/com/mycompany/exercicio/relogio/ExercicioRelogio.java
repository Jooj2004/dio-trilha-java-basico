/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 */

package com.mycompany.exercicio.relogio;

/**
 *
 * @author Pichau
 */
public class ExercicioRelogio {

    public static void main(String[] args) {
        Clock brClock = new BRClock();
        brClock.setSecond(0);
        brClock.setMinute(0);
        brClock.setHour(25);
        
        System.out.println(brClock.getTime());
        
        System.err.println(new USClock().convert(brClock).getTime());
    }
}

/*

üì¶ 1. Classes e Heran√ßa
Na classe Clock (arquivo 1), encontramos a defini√ß√£o de uma superclasse abstrata e selada:

public sealed abstract class Clock permits BRClock, USClock

    Isso significa que Clock n√£o pode ser instanciada diretamente e s√≥ pode ser estendida pelas classes autorizadas: BRClock e USClock (como visto nas partes 2 e 3).

    O uso de sealed junto com permits define uma hierarquia fechada e controlada, √∫til para cen√°rios onde a extens√£o da l√≥gica precisa ser previs√≠vel e segura.

As subclasses BRClock e USClock s√£o marcadas como non-sealed, permitindo que elas sim possam ser estendidas, caso o projeto evolua. Isso mostra como o Java permite 
flexibilidade seletiva na heran√ßa.

Ambas as subclasses implementam o m√©todo abstrato:

abstract Clock convert(Clock clock);

Esse m√©todo define um contrato comum para que cada classe possa se converter entre formatos de hora (BR ‚Üî US), exemplificando polimorfismo: o mesmo m√©todo com comportamentos 
diferentes dependendo da subclasse.

üîê 2. Encapsulamento
A classe Clock (parte 1) cont√©m tr√™s atributos protegidos:

protected int hour;
protected int minute;
protected int second;

O uso de protected permite que as subclasses acessem diretamente os campos, sem exp√¥-los ao restante do sistema. Isso mant√©m os atributos encapsulados, mas com certa abertura 
para heran√ßa.
A manipula√ß√£o desses atributos √© feita atrav√©s de m√©todos get e set, como setHour(int hour), que inclui valida√ß√£o:

if(hour >= 24){
    this.hour = 24;
    return;
}

Esse tipo de l√≥gica protege o objeto contra valores inv√°lidos, demonstrando boas pr√°ticas de encapsulamento.
Na classe USClock (parte 3), temos um exemplo adicional:

private String periodIndicator;

Aqui, o atributo √© privado, refor√ßando o encapsulamento total. O acesso √© feito via getPeriodIndicator(), e sua modifica√ß√£o por m√©todos como setAfterMidday() e 
setBeforeMidday() ‚Äî um bom exemplo de controle interno do estado, sem expor os detalhes de implementa√ß√£o.

üîÑ 3. Convers√£o e Polimorfismo
Tanto BRClock (parte 2) quanto USClock (parte 3) sobrescrevem o m√©todo convert(Clock clock) de formas distintas:
    BRClock (linha ~6 da parte 2) usa um switch pattern matching para identificar o tipo de rel√≥gio a ser convertido, e ajusta a hora conforme a l√≥gica de 24 horas 
ou 12 horas + per√≠odo (AM/PM).

    USClock (linha ~24 da parte 3) tamb√©m usa switch, mas incorpora a l√≥gica de per√≠odo no m√©todo setHour(int hour), demonstrando encapsulamento do comportamento relacionado 
√† formata√ß√£o americana.

Este uso de switch (clock) com case USClock e case BRClock √© um exemplo de desempacotamento com pattern matching em Java moderno, que colabora com o polimorfismo e a leitura 
clara da l√≥gica de convers√£o.

üß™4. Sobrescrita e Especializa√ß√£o
O m√©todo getTime() √© sobrescrito em USClock:

public String getTime() {
    return super.getTime() + ":" + this.getPeriodIndicator();
}

Esse √© um exemplo cl√°ssico de especializa√ß√£o de comportamento: enquanto a vers√£o base (Clock, parte 1) retorna a hora em formato HH:MM:SS, a vers√£o americana inclui o 
indicador AM/PM. Isso refor√ßa como o uso de heran√ßa e sobrescrita permite construir comportamentos mais ricos a partir de uma base comum.

üìå Conclus√£o
Este projeto apresenta, de forma clara e bem estruturada, os princ√≠pios da POO:

| Conceito            | Onde aparece no projeto                                           |
| ------------------- | ----------------------------------------------------------------- |
| **Classe Abstrata** | `Clock` (parte 1) define a estrutura base comum para rel√≥gios     |
| **Encapsulamento**  | Uso de `private`, `protected` e m√©todos `get/set` nas tr√™s partes |
| **Heran√ßa**         | `BRClock` e `USClock` estendem `Clock` com `non-sealed`           |
| **Polimorfismo**    | M√©todo abstrato `convert()` √© implementado de formas diferentes   |
| **Sobrescrita**     | `getTime()` em `USClock` redefine o comportamento base            |


*/